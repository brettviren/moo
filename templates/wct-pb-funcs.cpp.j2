// This file is 100% generated, do not edit.
// Implement converter functions between WCT data interfaces and PB objects.

// fixme: need to locate this header
#include "pbfuncs.h"

#include "pbfuncs-handmade.h"

{% for iface in ifaces.array %}
{%- set proto = protos.byname[iface.name] -%}
{%- set CLASS = "PB" + iface.name -%}
{{ ('\n' ~ iface.comment) | wordwrap(70) | replace('\n', '\n// ') }}
class {{ CLASS }} : public WireCell::I{{ iface.name }} {
public:
    {{ CLASS }}(const {{ protons }}::{{ proto.name }}& obj) : m_obj(obj) {};
    virtual ~{{ CLASS }}() {};

{%- for methname, meth in iface.methods.items() %}
{{ ('\n' ~ meth.comment) | wordwrap(64) | replace('\n', '\n    // ') }}
    virtual {{ meth.return }} {{ methname }}({{ meth.args }}) const {
{%- if meth.auto == "attribute" %}
        return m_obj.{{ methname }}();
{%- else -%};
        return wct_iface_{{ iface.name | lower }}_{{ methname }}(m_obj);
{%- endif %}
    }
{%- endfor %}

private:
    {{ protons }}::{{ proto.name }} m_obj;
};  // end {{ CLASS }}
{% endfor %}

{% for iface in ifaces.array %}
{% set proto = protos.byname[iface.name] %}
// Convert {{iface.name}} from WCT data interface to WCT protobuf object
void
WireCell::fill({{ protons }}::{{ proto.name }}& pbobj,
               const WireCell::I{{ iface.name}}::pointer &ifptr)
{
{%- for field in proto.fields -%}
{% if iface.methods[field.name] is defined and iface.methods[field.name].auto == "attribute" %}
    pbobj.set_{{ field.name }}(ifptr->{{ field.name }}());
{%- else %}
    wct_pb_{{ iface.name | lower }}_{{ field.name }}(pbobj, ifptr);
{%- endif %}
{% endfor %}    
}

// Produce a WCT data interface from a WCT protobuf object.
WireCell::I{{ iface.name }}::pointer
WireCell::intern(const {{protons}}::{{proto.name}}& pbobj)
{
    return std::make_shared<PB{{ iface.name }}>(pbobj);
}
{% endfor %}

