/*
 * THIS FILE IS TOTALLY GENERATED.  DO NOT EDIT
 *
 * {{license|wordwrap(72, wrapstring='\n * ')}}
 *
 * {{description|wordwrap(72, wrapstring='\n * ')}}
 */

#include "{{namespace}}/api.hpp"
#include "{{namespace}}/proto.hpp"

{% for epname, ep in endpoints.items() %}
/*
 * Methods for {{epname}} API
 *
 * {{ep.api.description|wordwrap(72, wrapstring='\n * ')}}
 */

{{namespace}}::{{ep.api.classname}}::{{ep.api.classname}}()
: moo::apibase(std::make_unique<{{namespace}}::{{ep.proto.classname}}>())
{
    
}


{% for met in ep.methods %}
// {{met.help}}
{{ met.type.c }} {{namespace}}::{{ep.api.classname}}::{{ met.message.name }} ( {% for f in met.message.attrs %}{{f.type.c}} {{f.name}}{{ "," if not loop.last }} {%endfor%})
{
    send_command({
            {"name","{{met.message.name}}"},
            {% for f in met.message.attrs -%}
            { "{{f.name}}", {{f.name}} },
            {%-endfor%}
        });

    {% if met.accepts %}
    auto obj = recv_result();
    {% if met.type.c != "void" %}

    {% for acc in met.accepts %}
    if (obj["name"] == "{{acc.message.name}}") {
        {% for err in acc.errors %}
        if (obj["{{err.key}}"] == {{err.value}}) {
            {{err.code}}
        }
        {%endfor%}
        return obj["{{acc.key}}"];
    }
    {% endfor-%}
    {%endif%}
    {%-endif %}
    return {{ met.default }};
}
{%endfor%}

{%endfor%}
