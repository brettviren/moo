/* -*- c++ -*- */
{%- macro struct(obj) %}
struct {{ obj.name }} {
    {% for a in obj.attrs %}
    {% if a.type.name == "str" %}
    {{a.type.c}} {{a.name}} = "{{a.def}}";
    {% else %}
    {{a.type.c}} {{a.name}} = {{a.def}};
    {% endif %}
    {% endfor %}
    };
{%- endmacro %}


{%- macro event_method_decl(e,m, ns) %}
{{m.type.c}} {{m.name}}(const {{ns}}::{{e.name}}& event{% for a in m.attrs %}, {{a.type.c}} {{a.name}}{% endfor %});
{%- endmacro %}

{%- macro event_method_decl_purevirt(e,m, ns) %}
virtual {{m.type.c}} {{m.name}}(const {{ns}}::{{e.name}}& event{% for a in m.attrs %}, {{a.type.c}} {{a.name}}{% endfor %}) = 0;
{%- endmacro %}

{%- macro sml_lambda_guard(grds) %}
{%- if grds|length > 0 -%}[{%- for g in grds -%}
    {{ ' and ' if not loop.first }} [](const auto& e, Context& c) { return c.{{g.name}}(e); }
    {%- endfor -%}]{%- endif -%}
{%- endmacro %}
{%- macro sml_lambda_action(acts) %}
{%- if acts|length > 0 -%}({%- for a in acts -%}
    {{ ', ' if not loop.first }} [](const auto& e, Context& c){ c.{{a.name}}(e); }
    {%- endfor %} ){%- endif -%}
{%- endmacro %}

{%- macro sml_lambda_ega(t) %}
{%- if t.event -%}
+ event<{{t.event.name}}>
{%- endif -%}
{%- if t.guards or t.actions %}
{{ sml_lambda_guard(t.guards) }} / {{ sml_lambda_action(t.actions) }}
{%- endif -%}
{%- endmacro %}

{%- macro sml_lambda_tran(t) %}
{{t.star if t.star}} state<{{t.ini.name}}> {{sml_lambda_ega(t)}} = state<{{ t.fin.name }}>
{%- endmacro %}

{%- macro smltt_lambdas(tt) %}
{% for t in tt -%}
{{ "," if not loop.first }}{{ sml_lambda_tran(t) }}
{% endfor %}
{%- endmacro %}
