#include "{{namespace}}/{{classname}}.hpp"

using namespace {{namespace}};
int main()
{
    zmq::context_t ctx;
    zmq::socket_t ping(ctx, zmq::socket_type::push);
    zmq::socket_t pong(ctx, zmq::socket_type::pull);
    ping.bind("inproc://test_codec");
    pong.connect("inproc://test_codec");

    {{classname}} codec;
    {% for msg in messages %}
    { // message: {{msg.name}}
        {{msg.name}} obj;
        {% for a in msg.attrs %}
        {% if a.type.name == "str" %}
        obj.{{a.name}} = "hi";
        {% else %}
        obj.{{a.name}} = 42;
        {% endif %}
        {% endfor %}

        codec.set_{{msg.name}}(obj);
        {% for a in msg.attrs %}
        {% if a.type.name == "str" %}
        assert(codec.get_{{a.name}}() == "hi");
        {% else %}
        assert(codec.get_{{a.name}}() == 42);
        {% endif %}
        {% endfor %}

        {
            {{classname}} codec2 = codec;
            assert(codec2.get_ident() == {{msg.ident}});
            {% for a in msg.attrs %}
            {% if a.type.name == "str" %}
            assert(codec2.get_{{a.name}}() == "hi");
            {% else %}
            assert(codec2.get_{{a.name}}() == 42);
            {% endif %}
            {% endfor %}
        }


        codec.send(ping);
        {
            {{classname}} codec3;
            assert(codec3.get_ident() != {{msg.ident}});
            {% for a in msg.attrs %}
            {% if a.type.name == "str" %}
            assert(codec3.get_{{a.name}}() != "hi");
            {% else %}
            assert(codec3.get_{{a.name}}() != 42);
            {% endif %}
            {% endfor %}

            codec3.recv(pong);
            assert(codec3.get_ident() == {{msg.ident}});
            {% for a in msg.attrs %}
            {% if a.type.name == "str" %}
            assert(codec3.get_{{a.name}}() == "hi");
            {% else %}
            assert(codec3.get_{{a.name}}() == 42);
            {% endif %}
            {% endfor %}
        }
    }
    {%endfor%}
    
    return 0;
}
