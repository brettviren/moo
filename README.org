#+title:  moo 無 model oriented objects
#+EXPORT_FILE_NAME: index.html
#+subtitle: Model Oriented Objects
#+setupfile: setup.org

* Overview
  :PROPERTIES:
  :CUSTOM_ID: overview
  :END:

*moo* is a tool for managing data structures.  *moo* operates on:

- schema :: data structures describing the structure of data (including schema).

- model :: data structure matching schema to a template.

- templates :: marked up text in some target format which is parameterized by a model and from which a document (eg, C++ code file) may be generated.

- codegen :: generated artifacts

* Version
  :PROPERTIES:
  :CUSTOM_ID: version
  :END:

The current *moo* version is...

#+begin_src shell :exports both :results output code :wrap "example"
  moo version
#+end_src

#+RESULTS:
#+begin_example
#+end_example

...as of last time this file was updated.  See ~moo/version.py~ for the
definitive version.

* License

*moo* is free software and may be used under the terms described in file
[[file:COPYING][COPYING]].  These terms explicitly do NOT extend to any of your own
files which may be input to or output from *moo* software.

* Installation
  :PROPERTIES:
  :CUSTOM_ID: install
  :END:

*moo* requires Python 3.5 or newer.

*moo* installs in to your favorite Python environment in most of the
usual ways.  Some examples are given below.  Due to a name conflict
(this) *moo* is currently not distributed through PyPI.

** Python environment
   :PROPERTIES:
   :CUSTOM_ID: python-env
   :END:

Here, ~python~ is assumed to be Python 3.  Use whatever your favorite
Python environment is to assure that.  Some suggestions:

*** Python3 built in virtual environment

#+begin_example
  $ python3 -m venv venv
  $ source venv/bin/activiate
#+end_example

*** Direnv

Install ~direnv~ and activate it in your shell, then:

#+begin_example
  $ echo "layout python3" > .envrc
  $ direnv allow
#+end_example

See more at https://github.com/direnv/direnv

** Install a release
   :PROPERTIES:
   :CUSTOM_ID: install-rel
   :END:

Via a release tarball:

#+begin_example
  $ python -m pip install https://github.com/brettviren/moo/archive/0.4.1.tar.gz
#+end_example

Or, via git:

#+begin_example
  $ python -m pip install git+git://github.com/brettviren/moo.git@0.4.1#egg=moo
#+end_example


** Install development
   :PROPERTIES:
   :CUSTOM_ID: install-dev
   :END:

Just install:

#+begin_example
  $ python -m pip install git+git://github.com/brettviren/moo.git#egg=moo
#+end_example

Or, maybe you want to hack on the code:

#+begin_example
  $ git clone git@github.com:brettviren/moo.git
  $ cd moo
  $ pyton -m pip install -e .
#+end_example

* Quick start
  :PROPERTIES:
  :CUSTOM_ID: punt
  :END:

The *moo* command line interface provides various commands and online
help:

#+begin_example
  $ moo --help
#+end_example

See documentation section for details.

* Documentation
  :PROPERTIES:
  :CUSTOM_ID: docs
  :END:

** Links
   :PROPERTIES:
   :CUSTOM_ID: links
   :END:

- https://brettviren.github.io/moo

- [[https://github.com/brettviren/moo][code repository]] and its [[file:README.org][README]] 

- [[file:moo.org][moo high level documentation]]

- [[file:oschema.org][moo object schema paradigm]]

- [[file:otypes.org][moo object types]]

- [[file:buildsys.org][moo and build systems]]

- [[file:wcup.org][moo as Wire-Cell user package generator]]

- [[file:reqs.org][moo for LaTeX and spreadsheet generator]]

* Releases
  :PROPERTIES:
  :CUSTOM_ID: releases
  :END:


While ~moo~ has a ~0.y.z~ release, backward compatibility is not a strong
priority as all uses are also in flux.  ~y~ will increment with major
new features which may or may not be backward compatible.  ~z~ will
increment with minor bug fixes.

** Releasing
   :PROPERTIES:
   :CUSTOM_ID: releasing
   :END:

Notes to self on making a release: 

- edit [[file:moo/version.py]] to set release version
- reexport this and other documentation files, check for failures
- ~git commit~ and ~git tag -am 'Pithy release message' X.Y.Z~ using matching string
- edit [[file:moo/version.py]] to go back to a dev version
- ~git commit~ and ~git push~ and ~git push --tags~
- visit github release page and add any useful details

* Etc
   :PROPERTIES:
   :CUSTOM_ID: etc
   :END:

The name *moo* is a play on the Japanese term 無 which may be
interpreted to English in a few ways.  Some are listed below along
with how the meaning reflects on aspects of *moo*.

- Untainted pure mind :: *moo* avoids being "opinionated", is centered
  on ideas expressed as abstract data structures and so can be used
  for a wide variety of things from generating code, documents or
  package skeletons.  *moo* forms its data structures by ingesting most
  of the popular file formats likely to be used.  And, *moo* can produce
  any file format for which a user may create a template.

- No strings attached :: *moo* is not intended to be an invasive tool.
  *moo* artifacts can be generated as desired and *moo* may be left
  behind.  *moo* does not lock-in particular formats.  *moo* extends this
  freedom to your own applications.  By adopting *moo* codegen
  philosophy an app need not lock-in itself to particular data
  formats, representations, or serializations technologies.

- Nothingness :: *moo* is not really anything itself but rather it is
  the bits that go between other real things which perform the "heavy
  lifting" (Jsonnet, anyconfig, Jinja, JSON Schema, user templates).
  *moo* lets apps embrace the power of this nothingness by switching
  developer effort away from repetitive programming tasks and toward
  data structure and template development and then through code
  generation that effort gains multiplicative power.

