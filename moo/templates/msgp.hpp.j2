{% import 'networkqueue-cpp.hpp.j2' as cpp %}
/*
 * This file is 100% generated.  Any manual edits will likely be lost.
 *
 * This contains functions struct and other type definitions for schema in
 * {{cpp.ns(model)}} to be serialized via MsgPack.
 */
{% set tcname = "MsgPack" %}
#ifndef {{cpp.headerguard(model, tcname)}}
#define {{cpp.headerguard(model, tcname)}}


#include "{{model.relpath|replace(".","/")}}/Structs.hpp"


{% for ep in model.extrefs %}
#include "{{ep}}/{{tcname}}.hpp"
{% endfor %}

#include <msgpack.hpp>
#include <networkqueue/msgpack_json.hpp>

{% for fqn in model.byscn.enum %}
MSGPACK_ADD_ENUM({{fqn|replace(".","::")}})
{% endfor %}

// MsgPack serialization/deserialization functions
namespace msgpack {
MSGPACK_API_VERSION_NAMESPACE(MSGPACK_DEFAULT_API_NS) {
namespace adaptor {

{% for fqn in model.byscn.record %}
{% set r = model.byref[fqn] %}
{% set n = fqn.replace(model.nspre,"") %}
{% set fqncpp = fqn|replace(".","::") %}

template<>
struct convert<{{fqncpp}}> {
    msgpack::object const& operator()(msgpack::object const& o, {{fqncpp}}& v) const {
        if (o.type != msgpack::type::ARRAY) throw msgpack::type_error();
        if (o.via.array.size != {{ r.fields|length }}) throw msgpack::type_error();
        {% for f in r.fields %}
        v.{{f.name}} = o.via.array.ptr[{{loop.index0}}].as<{{f.item|replace(".","::")}}>();
        {% endfor %}
        return o;
    }
};

template<>
struct pack<{{fqncpp}}> {
    template <typename Stream>
    packer<Stream>& operator()(msgpack::packer<Stream>& o, {{fqncpp}} const& v) const {
        // packing member variables as an array.
        o.pack_array({{ r.fields|length }});
        {% for f in r.fields %}
        o.pack(v.{{ f.name }});
        {% endfor %}
        return o;
    }
};

{% endfor %}

} // namespace adaptor
} // MSGPACK_API_VERSION_NAMESPACE(MSGPACK_DEFAULT_API_NS)
} // namespace msgpack

#endif // {{cpp.headerguard(model, tcname)}}
