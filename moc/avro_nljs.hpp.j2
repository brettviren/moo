#ifndef {{model.namespace|replace(".","_")|upper}}_{{model.name|upper}}_NLJS_HPP
#define {{model.namespace|replace(".","_")|upper}}_{{model.name|upper}}_NLJS_HPP


#include "json.hpp"
#include "{{model.name}}_avro.hpp"

namespace {{ model.namespace }} {

    using json = nlohmann::json;

    {% for t in model.types %}
    {% if t.type == "enum" %}
    NLOHMANN_JSON_SERIALIZE_ENUM( {{t.name}}, {
            {% for sname in t.symbols %}
            { {{model.namespace}}::{{t.name}}::{{sname}}, "{{sname}}" },
            {% endfor %}
        })
    {% endif %}
    {% endfor %}

    {% for t in model.types %}
    {% if t.type == "record" %}
    // Converters for {{t.name}}
    // {{t.doc}}
    inline void to_json(json& j, const {{t.name}}& obj) {
        j = json{
            {% for f in t.fields %}
            {"{{f.name}}", obj.{{f.name}}}{{ "," if not loop.last }}
            {% endfor%}
        };
    }
    inline void from_json(const json& j, {{t.name}}& obj) {
        {% for f in t.fields %}
        j.at("{{f.name}}").get_to(obj.{{f.name}});    
        {% endfor%}
    }
    {% endif %}
    {% endfor %}


} // namespace {{model.namespace}}

#endif
