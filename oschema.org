#+title: Schema Objects
#+subtitle: ~moo~ ç„¡ ~oschema~
#+setupfile: setup.org

#+name: grep
#+begin_src shell :var re="" :var file="/dev/null"  :var a=0 :var lang="shell" :exports none :results output code
grep -m1 -A$a "$re" "$file"
#+end_src

* Concepts
  :PROPERTIES:
  :CUSTOM_ID: concepts
  :END:


A *schema* describes one or more *types*.  In the "oschema"
representation, a type is represented as an finalized *object* (compared
to other representations in moo which are functional in nature).  Each
type can be considered an instance of a *schema class*.  The following
schema classes are currently supported.

- ~boolean~ :: a type which may take value "true" or "false"
- ~number~ :: a numeric type of given format and size
- ~string~ :: a character string type possibly matching some pattern or format
- ~sequence~ :: an array or vector with elements of one type
- ~tuple~ :: (not yet)
- ~record~ :: a collection of named types, (eg such as a ~class~ or ~struct~)
- ~enum~ :: a type that may take one value from a predefined, limited set of values
- ~any~ :: a type that may take a value of any type (eg such as ~void*~, ~boost::any~, ~nlohmann::json~)
- ~anyOf~ :: a type that may take a value of any type in a predefined, limited set of types.
- ~namespace~ :: a collection of named types, (distinct from ~record~ to match eg C++/Python semantics)

Every *type* provides a common set of *attributes* some of which are
required and others optional:

- ~name~ :: (required) type name unique to the type context (see ~path~)

- ~schema~ :: (required) string identifying the schema class taken from above list

- ~doc~ :: (optional, default empty) document string briefly describing the type

- ~path~ :: (required, potentially empty), ordered array of names
  representing the context of the type (eg as a C++ ~namespace~ or
  Python module path)

Some types *reference* other types.  These include instances of:
~sequence~, ~record~, ~namespace~ and ~anyOf~.  A *type reference* is
represented as a /fully-qualified type name/ (FQTN) which is formed as
the period ("~.~") delimited concatenation of the elements of ~path~
(if any) and the ~name~.  A FQTN shall not begin nor end with a period
and there the concept of a "relative" type reference is not supported.

Thus, every type exists at an absolutely determined location in a name
hierarchy, and it carries this location with it as ~path~ + ~name~.
Types that do so may reference another type by its ~path~ and ~name~.
Of course, to resolve a reference the referred type must be available
in order to match the type reference against possible ~path~ and
~name~.



* Schema
  :PROPERTIES:
  :CUSTOM_ID: Schema
  :END:


This section describes how to construct Schema in Jsonnet and in
Python.  

We will describe how to use Jsonnet to build schema in some detail in
the next subsection.  However, it should be noted that this is a proxy
for using *any language* which can produce the same kind of data
structure.  ~moo~ can read in such structure in Jsonnet, JSON, XML,
INI and YAML formats.

Internally, ~moo~ represents a schema with Python objects that are
instances of Python versions of the conceptual schema classes
described above.  ~moo~ can build these objects by reading schema as
data structures or a developer may "hand-wire" schema by writing
Python code in terms of these classes.  This is described in the
second subsection below.

** Jsonnet
   :PROPERTIES:
   :CUSTOM_ID: schema-in-jsonnet
   :END:


Schema may be described easily in the [[https://jsonnet.org/][Jsonnet]] language which
explicitly targets the domain of data structure construction.  The
language allows for the construction to be factored into independent
"modules" (files) so that they may be combined in various ways to meet
different end goals.

A simple example is given.  It consists of an overall schema factored
into a ~sys~ schema and an ~app~ schema which depends on ~sys~.  In a real
system, the ~sys~ schema may correspond to common types used by a
variety of system applications and the ~app~ structure may correspond to
schema relevant to one particular type of application.

Here is the ~sys~ schema:

#+include: examples/oschema/sys.jsonnet src jsonnet

The body of this simple schema is merely the single line:

#+call: grep("Count", "examples/oschema/sys.jsonnet", 0) :wrap "src jsonnet"

#+RESULTS:
#+begin_src jsonnet
    sys.number("Count", "u4")
#+end_src

We may see a fully compiled representation in JSON format using ~moo~:

#+begin_src shell :exports both :results output code :wrap "src json"
  moo compile examples/oschema/sys.jsonnet
#+end_src

#+RESULTS:
#+begin_src json
[
    {
        "deps": [],
        "dtype": "u4",
        "name": "Count",
        "path": [
            "sys"
        ],
        "schema": "number"
    }
]
#+end_src

This is thus a schema with a single type called ~Count~ which is of
schema class ~number~ that has numeric Numpy-style type code ~dtype~
of an unsigned integer in four bytes ~"u4"~ and is in a context
~path~ of simply ~["sys"]~.

Next we imagine one possible application schema which will use the
~sys~ schema above.  Here it is defined in Jsonnet as:

#+include: examples/oschema/app.jsonnet src jsonnet

We will go through these lines of Jsonnet in order to give some
detail.  Starting with the first few:

#+call: grep("local moo", "examples/oschema/app.jsonnet", 2) :wrap "src jsonnet"

#+RESULTS:
#+begin_src jsonnet
local moo = import "moo.jsonnet";
local sh = moo.oschema.hier(import "sys.jsonnet");
local as = moo.oschema.schema("app");
#+end_src

As with ~sys~ we import the support module ~moo.jsonnet~.  We then
use ~moo.oschema.hier()~ method to process the previously defined ~sys~
schema which we ~import~ in place.  The ~.hier()~ method gives us a
handy object representation of this schema where they keys of the
object are the individual type names.  We'll see that in use next.  In
the third line we create a new schema factory rooted in the ~["app"]~
path.

Next, let's jump to the definition of the ~Person~ type which begins with:

#+call: grep("person:", "examples/oschema/app.jsonnet", 2) :wrap "src jsonnet"

#+RESULTS:
#+begin_src jsonnet
    person: as.record("Person", [
        as.field("email",self.email,
                 doc="E-mail address"),
#+end_src

You will note that ~Person~ is defined as a value of a ~person:~ key in a
containing object and that the type refers to other types by their own
key (eg ~self.email~).  It is to provide these references that we build
our types in a temporary object even though the ultimate output (as
we'll see) is a topologically sorted array of types.

And, in fact, finally our ~app~ schema is produced as a flat array
using:

#+call: grep("sort_select", "examples/oschema/app.jsonnet", 0) :wrap "src jsonnet"

#+RESULTS:
#+begin_src jsonnet
moo.oschema.sort_select(hier, "app")
#+end_src

This scans our temporary object ~hier~ and outputs an array holding
only the types which are "in" the ~["app"]~ path.  The array is output
in topological so that any dependency precedes a type that depends on
it. 

We can see the final result in full JSON glory:

#+begin_src shell :exports both :results output code :wrap "src json"
  moo compile examples/oschema/app.jsonnet
#+end_src

#+RESULTS:
#+begin_src json
[
    {
        "deps": [],
        "doc": "An associated object of any type",
        "name": "Affiliation",
        "path": [
            "app"
        ],
        "schema": "any"
    },
    {
        "deps": [
            "sys.Count"
        ],
        "doc": "All the counts",
        "items": "sys.Count",
        "name": "Counts",
        "path": [
            "app"
        ],
        "schema": "sequence"
    },
    {
        "deps": [],
        "doc": "Electronic mail address",
        "format": "email",
        "name": "Email",
        "path": [
            "app"
        ],
        "schema": "string"
    },
    {
        "deps": [],
        "name": "MBTI",
        "path": [
            "app"
        ],
        "schema": "enum",
        "symbols": [
            "introversion",
            "extroversion",
            "sensing",
            "intuition",
            "thinking",
            "feeling",
            "judging",
            "perceiving"
        ]
    },
    {
        "deps": [
            "app.Email",
            "app.Counts",
            "app.Affiliation",
            "app.MBTI"
        ],
        "doc": "Describe everything there is to know about an individual human",
        "fields": [
            {
                "doc": "E-mail address",
                "item": "app.Email",
                "name": "email"
            },
            {
                "doc": "Count of some things",
                "item": "app.Counts",
                "name": "counts"
            },
            {
                "doc": "Some affiliation",
                "item": "app.Affiliation",
                "name": "affil"
            },
            {
                "doc": "Personality",
                "item": "app.MBTI",
                "name": "mbti"
            }
        ],
        "name": "Person",
        "path": [
            "app"
        ],
        "schema": "record"
    }
]
#+end_src


** Python
   :PROPERTIES:
   :CUSTOM_ID: schema-in-python
   :END:

A bare bones example of the use of ~moo~ Python to load schema as data
into ~moo.oschema~ objects and back to data is given in:

#+include: examples/oschema/round-trip.py src python

A trivial hand-wired construction of the same schema using
~moo.oschema~ Python is in:

#+include: examples/oschema/hand-wired.py src python

** Other
   :PROPERTIES:
   :CUSTOM_ID: other
   :END:

~moo~ oschema provides support for construction of schema in Jsonnet and
Python languages only.  However, the user may produce schema in any
manner desired so long as the resulting data structure is represented
by one of the many input file formats supported by ~moo~.  In addition
to Jsonnet and JSON as described above, ~moo~ supports data structures
in XML, INI and YAML.


* Transforms
  :PROPERTIES:
  :CUSTOM_ID: transforms
  :END:

The main use of ~moo~ is to apply a data structure ("model") to a
template in order to generate a file (eg, a C++ header file).  The
template must have an understanding ("contract") of the structure of
the model.  The "oschema" structure described here is likely not
enough information, or not in a convenient form, for templates to be
easily defined.  

We must then have means to *transform* and possibly *augment* the
initial data structure into a *model* expected by the template and
~moo~ supports several strategies.

** DIY
   :PROPERTIES:
   :CUSTOM_ID: diy-trans
   :END:

In some cases, transformation and augmentation can may be done at the
input data structure level (ie, in Jsonnet).  ~moo~ "supports" this in
general by not restricting the structure of the input data.  Users are
free to come up with their own solutions.  Typically this requires
accepting a fluid contract between models and templates as one
iterates both.

** Jsonnet
   :PROPERTIES:
   :CUSTOM_ID: jsonnet-tla-trans
   :END:

In the case of using Jsonnet to describe the input data structure, the
~moo~ CLI supports the passing "top level arguments" (TLA) to the
Jsonnet code.  This requires the Jsonnet to evaluates to a top level
function.  

This simple example shows how TLAs work:

#+input: examples/oschema/tla.jsonnet src jsonnet

#+begin_src shell :exports both :results output code :wrap "src json"
  moo -A arg="hi" compile examples/oschema/tla.jsonnet
#+end_src

#+RESULTS:
#+begin_src json
{
    "arg": "hi",
    "def": "default"
}
#+end_src

As shown, multiple TLAs may be used and default TLA values may be
given in the Jsonnet and omitted on the CLI.  A TLA may also be
specified as a Jsonnet file in which case the contents of that file
will be evaluated and the resulting structure passed to the top level
function.  Reusing the above example and the ~sys~ schema file:

#+begin_src shell :exports both :results output code :wrap "src json"
  moo -A arg=examples/oschema/sys.jsonnet compile examples/oschema/tla.jsonnet
#+end_src

#+RESULTS:
#+begin_src json
{
    "arg": [
        {
            "deps": [],
            "dtype": "u4",
            "name": "Count",
            "path": [
                "sys"
            ],
            "schema": "number"
        }
    ],
    "def": "default"
}
#+end_src

Thus, with TLAs one may construct a Jsonnet file that transforms and
augments some initial data structure. 

** Python
   :PROPERTIES:
   :CUSTOM_ID: python-trans
   :END:

Jsonnet is a "small" language (one of its charms) and some
transformations may be complex enough that its simplicity poses a
limitation.  ~moo~ thus allows transformations to be defined in Python
and this opens up the ability to form the contract between model and
template in a more strong and object-oriented manner.

To do this, the user may tell the ~moo~ CLI to apply a Python function
to transform the input data just prior to the application of the
template.  The function is specified as a "dot" path naming the
function in its module.  We may use the ~moo dump~ command to
illustrate a transformation applied to the ~app~ schema:

#+begin_src shell :exports both :results output code :wrap "example"
  moo -M examples/oschema -t moo.oschema.typify dump -f pretty app.jsonnet
#+end_src

#+RESULTS:
#+begin_example
[<Any "app.Affiliation">,
 <Sequence "app.Counts" items:sys.Count>,
 <String "app.Email">,
 <Enum "app.MBTI">,
 <Record "app.Person" fields:{email, counts, affil, mbti}>]
#+end_example

The built-in ~moo.oschema.typify()~ function illustrated here converts a
schema type as a "raw" data structure into a corresponding Python
object.  In a template, the Python object should be usable everywhere
the "raw" data structure.  The ~typify()~ transform is thus only useful
if the extensions that the Python object provides are needed in a
template or if subsequent transforms require objects instead of raw
data structures (an example of which we'll see next).

We may also pipeline transformations.  Here is an example that will
use the output of ~typify()~, form a graph from the type reference
dependencies, and perform a [[https://en.wikipedia.org/wiki/Topological_sorting][topological sort]] to produce an array which
are ordered from least dependent to most.  

#+begin_src shell :exports both :results output code :wrap "example"
  moo -T examples/oschema -M examples/oschema \
      -t 'moo.oschema.typify|moo.oschema.graph|moo.oschema.depsort' \
        render app.jsonnet ool.txt.j2
#+end_src

#+RESULTS:
#+begin_example
Iterate over list of types:
<Any "app.Affiliation">
<Sequence "app.Counts" items:sys.Count>
<String "app.Email">
<Enum "app.MBTI">
<Record "app.Person" fields:{email, counts, affil, mbti}>
#+end_example

Note the ~Person~ type comes after the types that it refers to in its
fields due to the topological sort.  Also, note that this particular
transform may also be performed in the Jsonnet layer and so is used
here as an illustration of the functionality.

This example also shows that the pipeline of transformations may
becomes rather complex.  At some point, developing a composite
transformation function in Python and referring to it on the ~moo~ CLI
may be useful to keep the command argument list small.  

But, let us now move on.


* Codegen
  :PROPERTIES:
  :CUSTOM_ID: codegen
  :END:


Some trivial templates were introduced above in order to dump out some
of the information in their models.  Here we develop two "real"
templates and apply them to the ~app~ schema to generate code.

- ~ostructs.hpp.j2~ :: generate a C++ header a defining a C++ ~namespace~
  scope and holding definition of a C++ ~struct~ type for each type
  instance of the schema class ~record~ with a ~path~ in that scope.

- ~onljs.hpp.j2~ :: for each C++ ~struct~ defined above, produce functions
  that will allow the ~struct~ to participate in ~nlohmann::json~ (nljs)
  based serialization.

But, before developing the templates we first define a contract or
*model* on which the template development may depend.

** Model
   :PROPERTIES:
   :CUSTOM_ID: model
   :END:

The ~omodel~ contract is embodied in this Jsonnet file:

#+include: moo/jsonnet-code/omodel.jsonnet src jsonnet

The top-level arguments are described below.  What is produced is an
object (ie, an instance of the model) with these attributes:

- ~path~ :: the ~namespace~ path scope to focus on as a list/array
- ~nspre~ :: ~namespace~ prefix with trailing dot
- ~types~ :: array of type data structures which are in scope
- ~byref~ :: full type information retrieved via a type reference
- ~byscn~ :: references to types collected by schema class
- ~extref~ :: list of references to types outside the scope

Top-level arguments

- ~os~ :: bring in the ~oschema~ array
- ~path~ :: the ~namespace~ path with which select a branch on the full schema tree

We can test out some TLAs and test that the model compiles using the ~moo~ CLI:

#+begin_src shell :exports code :results none
  moo -M examples/oschema \
    -A os='app.jsonnet' -A path='app' \
       compile omodel.jsonnet
#+end_src

We want to apply a transform to the ~types~ attribute and can test that
with.  This can be done by with this command.  We will hold off on
showing the output until the next example CLI.


#+begin_src shell :exports code :results none
  moo -M examples/oschema \
    -A os='app.jsonnet' -A path='app' \
    -t '/types:moo.oschema.typify|moo.oschema.graph|moo.oschema.depsort' \
       dump -f pretty omodel.jsonnet
#+end_src

We are almost ready to turn to the template but one last detail is
needed.  As we will find there are some utilities that will simplify
developing the template and which are specific to the target-language
(eg C++) and which the rest of the model does not depend.  We will
bring these in as a model "graft".


#+begin_src shell :exports both :results output code :wrap "src python"
  moo -g '/lang:ocpp.jsonnet' \
      -M examples/oschema \
      -A os='app.jsonnet' -A path='app' \
      -t '/types:moo.oschema.typify|moo.oschema.graph|moo.oschema.depsort' \
      dump -f pretty omodel.jsonnet
#+end_src

#+RESULTS:
#+begin_src python
{'byref': {'app.Affiliation': {'deps': [],
                               'doc': 'An associated object of any type',
                               'name': 'Affiliation',
                               'path': ['app'],
                               'schema': 'any'},
           'app.Counts': {'deps': ['sys.Count'],
                          'doc': 'All the counts',
                          'items': 'sys.Count',
                          'name': 'Counts',
                          'path': ['app'],
                          'schema': 'sequence'},
           'app.Email': {'deps': [],
                         'doc': 'Electronic mail address',
                         'format': 'email',
                         'name': 'Email',
                         'path': ['app'],
                         'schema': 'string'},
           'app.MBTI': {'deps': [],
                        'name': 'MBTI',
                        'path': ['app'],
                        'schema': 'enum',
                        'symbols': ['introversion',
                                    'extroversion',
                                    'sensing',
                                    'intuition',
                                    'thinking',
                                    'feeling',
                                    'judging',
                                    'perceiving']},
           'app.Person': {'deps': ['app.Email',
                                   'app.Counts',
                                   'app.Affiliation',
                                   'app.MBTI'],
                          'doc': 'Describe everything there is to know about '
                                 'an individual human',
                          'fields': [{'doc': 'E-mail address',
                                      'item': 'app.Email',
                                      'name': 'email'},
                                     {'doc': 'Count of some things',
                                      'item': 'app.Counts',
                                      'name': 'counts'},
                                     {'doc': 'Some affiliation',
                                      'item': 'app.Affiliation',
                                      'name': 'affil'},
                                     {'doc': 'Personality',
                                      'item': 'app.MBTI',
                                      'name': 'mbti'}],
                          'name': 'Person',
                          'path': ['app'],
                          'schema': 'record'}},
 'byscn': {'any': ['app.Affiliation'],
           'anyOf': [],
           'boolean': [],
           'enum': ['app.MBTI'],
           'namespace': [],
           'number': [],
           'record': ['app.Person'],
           'sequence': ['app.Counts'],
           'string': ['app.Email']},
 'ctxpath': [],
 'ctxpre': '',
 'extrefs': ['sys'],
 'lang': {'dtypes': {'f4': 'float',
                     'f8': 'double',
                     'i2': 'int16_t',
                     'i4': 'int32_t',
                     'i8': 'int64_t',
                     'u2': 'uint16_t',
                     'u4': 'uint32_t',
                     'u8': 'uint64_t'},
          'imports': {'any': ['nlohmann/json.hpp'],
                      'anyof': ['variant'],
                      'sequence': ['vector'],
                      'string': ['string']},
          'types': {'any': 'nlohmann::json',
                    'sequence': 'std::vector',
                    'string': 'std::string'}},
 'nspre': 'app.',
 'path': ['app'],
 'relpath': 'app',
 'types': [<Any "app.Affiliation">,
           <Sequence "app.Counts" items:sys.Count>,
           <String "app.Email">,
           <Enum "app.MBTI">,
           <Record "app.Person" fields:{email, counts, affil, mbti}>]}
#+end_src

If you squint at that dump you'll find the ~lang~ attribute added.

These CLI are getting rather long and we may add bits to make that easier but let's now move to the template.



** Template
   :PROPERTIES:
   :CUSTOM_ID: struct
   :END:

The [[file:moo/templates/ostructs.hpp.j2][ostructs.hpp.j2]] template file gets applied to the ~omodel~ to
produce a C++ header file defining a ~struct~ for each ~record~ instance
in the model and any supporting types via a ~using~ type alias.  It also
uses the ~extref~ info to ~#include~ any required external headers that
themselves are also generated from other parts of the overall schema.

Take particular note that this ~#include~ pattern *bakes in a specific
mapping* from a type's ~path~ array to file locations.  For the resulting
C++ code to compile, this pattern must of course actually be honored
in some way.  This may be done manually by properly placing the
generated files according to this mapping or, better, be automatically
assured via a build system.  Future work may generate this file-system
level assurance itself from schema.  For now, we must simply be careful.

Finally, note that the grafting of ~ocpp.jsonnet~ selects a particular
mapping from schema class names to their C++ equivalents.  Eg,
~nlohman::json~ for ~any~.  If we wished to generate code using a
different mapping, such as ~boost::any~ for ~any~ we would need to modify
or fork this grafted data structure while the rest of the structure
may be left as-is.

We can finally generate code by changing the above CLI call from ~dump~
to ~render~ and adding the template file name.

#+begin_src shell :exports both :results output code :wrap "src c++"
  moo -g '/lang:ocpp.jsonnet' \
      -M examples/oschema \
      -A os='app.jsonnet' -A path='app' \
      -t '/types:moo.oschema.typify|moo.oschema.graph|moo.oschema.depsort' \
      render omodel.jsonnet ostructs.hpp.j2
#+end_src

#+RESULTS:
#+begin_src c++
/*
 ,* This file is 100% generated.  Any manual edits will likely be lost.
 ,*
 ,* This contains struct and other type definitions for shema in 
 ,* namespace app.
 ,*/
#ifndef APP_STRUCTS_HPP
#define APP_STRUCTS_HPP

#include "sys/Structs.hpp"

#include <nlohmann/json.hpp>
#include <vector>
#include <string>

namespace app {

    // @brief An associated object of any type
    using Affiliation = nlohmann::json;

    // @brief All the counts
    using Counts = std::vector<sys::Count>;

    // @brief Electronic mail address
    using Email = std::string;

    // @brief 
    enum class MBTI: unsigned {
        introversion,
        extroversion,
        sensing,
        intuition,
        thinking,
        feeling,
        judging,
        perceiving,
    };

    // @brief Describe everything there is to know about an individual human
    struct Person {

        // @brief E-mail address
        Email email;

        // @brief Count of some things
        Counts counts;

        // @brief Some affiliation
        Affiliation affil;

        // @brief Personality
        MBTI mbti;
    };

} // namespace app

#endif // APP_STRUCTS_HPP
#+end_src

And, here are the corresponding ~nlohmann::json~ serialization
functions, produced by applying the [[file:moo/templates/oschema/onljs.hpp.j2][onljs.hpp.j2]] template to the same
model.

#+begin_src shell :exports both :results output code :wrap "src c++"
  moo -g '/lang:ocpp.jsonnet' \
      -M examples/oschema \
      -A os='app.jsonnet' -A path='app' \
      -t '/types:moo.oschema.typify|moo.oschema.graph|moo.oschema.depsort' \
      render omodel.jsonnet onljs.hpp.j2
#+end_src

#+RESULTS:
#+begin_src c++
/*
 ,* This file is 100% generated.  Any manual edits will likely be lost.
 ,*
 ,* This contains functions struct and other type definitions for shema in 
 ,* namespace app to be serialized via nlohmann::json.
 ,*/
#ifndef APP_NLJS_HPP
#define APP_NLJS_HPP


#include "app/Structs.hpp"

#include "sys/Nljs.hpp"

#include <nlohmann/json.hpp>

namespace app {

    using data_t = nlohmann::json;

    NLOHMANN_JSON_SERIALIZE_ENUM( MBTI, {
            { app::MBTI::introversion, "introversion" },
            { app::MBTI::extroversion, "extroversion" },
            { app::MBTI::sensing, "sensing" },
            { app::MBTI::intuition, "intuition" },
            { app::MBTI::thinking, "thinking" },
            { app::MBTI::feeling, "feeling" },
            { app::MBTI::judging, "judging" },
            { app::MBTI::perceiving, "perceiving" },
        })

    
    inline void to_json(data_t& j, const Person& obj) {
        j["email"] = obj.email;
        j["counts"] = obj.counts;
        j["affil"] = obj.affil;
        j["mbti"] = obj.mbti;
    }
    
    inline void from_json(const data_t& j, Person& obj) {
        if (j.contains("email"))
            j.at("email").get_to(obj.email);    
        if (j.contains("counts"))
            j.at("counts").get_to(obj.counts);    
        obj.affil = j.at("affil");
        if (j.contains("mbti"))
            j.at("mbti").get_to(obj.mbti);    
    }
    
    // fixme: add support for MessagePack serializers (at least)

} // namespace app

#endif // APP_NLJS_HPP
#+end_src



* Objects
  :PROPERTIES:
  :CUSTOM_ID: objects
  :END:

Besides generating code from a schema, data objects may be constructed
with the help of and validated against schema.

** Construction
   :PROPERTIES:
   :CUSTOM_ID: object-ctor
   :END:

A goal is to provide comprehensive object editors which are directed
by schema.  When such editors are implemented as Python they may use
~moo.ogen~ module to produce Python classes that correspond to ~moo~
object schema.



** Validation
   :PROPERTIES:
   :CUSTOM_ID: object-val
   :END:

The ~moo.oschema~ schema classes produce type instances which provide
snippets of [[https://json-schema.org/understanding-json-schema/index.html][JSON Schema]].  Type instances are also ~callable~ objects.
When called on a value, it will be validated against the type's
schema.

- [ ] use with ~moo~ with a schema document
- [ ] use with ~moo.oschema~ 



