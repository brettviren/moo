#+title: Schema Objects
#+subtitle: ~moo~ ç„¡ ~oschema~
#+setupfile: setup.org

#+name: grep
#+begin_src shell :var re="" :var file="/dev/null"  :var a=0 :var lang="shell" :exports none :results output code
grep -m1 -A$a "$re" "$file"
#+end_src

* Concepts
  :PROPERTIES:
  :CUSTOM_ID: concepts
  :END:


A *schema* describes one or more *types*.  In the "oschema"
representation, a type is represented as an finalized *object* (compared
to other representations in moo which are functional in nature).  Each
type can be considered an instance of a *schema class*.  The following
schema classes are currently supported.

- ~boolean~ :: a type which may take value "true" or "false"
- ~number~ :: a numeric type of given format and size
- ~string~ :: a character string type possibly matching some pattern or format
- ~sequence~ :: an array or vector with elements of one type
- ~tuple~ :: (not yet)
- ~record~ :: a collection of named types, (eg such as a ~class~ or ~struct~)
- ~enum~ :: a type that may take one value from a predefined, limited set of values
- ~any~ :: a type that may take a value of any type (eg such as ~void*~, ~boost::any~, ~nlohmann::json~)
- ~anyOf~ :: a type that may take a value of any type in a predefined, limited set of types.
- ~namespace~ :: a collection of named types, (distinct from ~record~ to match eg C++/Python semantics)

Every *type* provides a common set of *attributes* some of which are
required and others optional:

- ~name~ :: (required) type name unique to the type context (see ~path~)

- ~schema~ :: (required) string identifying the schema class taken from above list

- ~doc~ :: (optional, default empty) document string briefly describing the type

- ~path~ :: (required, potentially empty), ordered array of names
  representing the context of the type (eg as a C++ ~namespace~ or
  Python module path)

Some types *reference* other types.  These include instances of:
~sequence~, ~record~, ~namespace~ and ~anyOf~.  A *type reference* is
represented as a /fully-qualified type name/ (FQTN) which is formed as
the period ("~.~") delimited concatenation of the elements of ~path~
(if any) and the ~name~.  A FQTN shall not begin nor end with a period
and there the concept of a "relative" type reference is not supported.

Thus, every type exists at an absolutely determined location in a name
hierarchy, and it carries this location with it as ~path~ + ~name~.
Types that do so may reference another type by its ~path~ and ~name~.
Of course, to resolve a reference the referred type must be available
in order to match the type reference against possible ~path~ and
~name~.



* Schema
  :PROPERTIES:
  :CUSTOM_ID: Schema
  :END:


This section describes how to construct Schema in Jsonnet and in
Python.  

We will describe how to use Jsonnet to build schema in some detail in
the next subsection.  However, it should be noted that this is a proxy
for using *any language* which can produce the same kind of data
structure.  ~moo~ can read in such structure in Jsonnet, JSON, XML,
INI and YAML formats.

Internally, ~moo~ represents a schema with Python objects that are
instances of Python versions of the conceptual schema classes
described above.  ~moo~ can build these objects by reading schema as
data structures or a developer may "hand-wire" schema by writing
Python code in terms of these classes.  This is described in the
second subsection below.

** Jsonnet
   :PROPERTIES:
   :CUSTOM_ID: schema-in-jsonnet
   :END:


Schema may be described easily in the [[https://jsonnet.org/][Jsonnet]] language which
explicitly targets the domain of data structure construction.  The
language allows for the construction to be factored into independent
"modules" (files) so that they may be combined in various ways to meet
different end goals.

A simple example is given.  It consists of an overall schema factored
into a ~sys~ schema and an ~app~ schema which depends on ~sys~.  In a real
system, the ~sys~ schema may correspond to common types used by a
variety of system applications and the ~app~ structure may correspond to
schema relevant to one particular type of application.

Here is the ~sys~ schema:

#+include: examples/oschema/sys.jsonnet src jsonnet

The body of this simple schema is merely the single line:

#+call: grep("Count", "examples/oschema/sys.jsonnet", 0) :wrap "src jsonnet"

#+RESULTS:
#+begin_src jsonnet
    sys.number("Count", "u4")
#+end_src

We may see a fully compiled representation in JSON format using ~moo~:

#+begin_src shell :exports both :results output code :wrap "src json"
  moo compile examples/oschema/sys.jsonnet
#+end_src

#+RESULTS:
#+begin_src json
[
    {
        "dtype": "u4",
        "name": "Count",
        "path": [
            "sys"
        ],
        "schema": "number"
    }
]
#+end_src

This is thus a schema with a single type called ~Count~ which is of
schema class ~number~ that has numeric Numpy-style type code ~dtype~
of an unsigned integer in four bytes ~"u4"~ and is in a context
~path~ of simply ~["sys"]~.

Next we imagine one possible application schema which will use the
~sys~ schema above.  Here it is defined in Jsonnet as:

#+include: examples/oschema/app.jsonnet src jsonnet

We will go through these lines of Jsonnet in order to give some
detail.  Starting with the first few:

#+call: grep("local oschema", "examples/oschema/app.jsonnet", 2) :wrap "src jsonnet"

#+RESULTS:
#+begin_src jsonnet
local oschema = import "oschema.jsonnet";
local sh = oschema.hier(import "sys.jsonnet");
local as = oschema.schema("app");
#+end_src

As with ~sys~ we import the support module ~oschema.jsonnet~.  We then
use its ~.hier()~ method to process the previously defined ~sys~
schema which we ~import~ in place.  The ~.hier()~ method gives us a
handy object representation of this schema where they keys of the
object are the individual type names.  We'll see that in use next.  In
the third line we create a new schema factory rooted in the ~["app"]~
path.

Next we go to the main, if temporary, object in this schema:

#+call: grep("local hier", "examples/oschema/app.jsonnet", 7) :wrap "src jsonnet"

#+RESULTS:
#+begin_src jsonnet
local hier = {
    email: as.string("Email", format="email"),
    person: as.record("Person", [
        as.field("email",self.email),
        as.field("counts",self.counts)
    ]),
    counts: as.sequence("Counts",sh.sys.Count),
};
#+end_src

Note how ~person~ has two fields,
~email~ and ~counts~ both of which hold a type defined elsewhere in
our object.  In particular ~counts~ is a sequence with elements of
type ~Count~ that is defined in our "sys" schema.

It's important to understand we use this temporary ~hier~ object as a
context to construct structure.  It's keys are not intrinsically
meaningful but rather only ways to refer to one type in another.  

In fact, finally our ~app~ schema is produced as a flat array using:

#+call: grep("sort_select", "examples/oschema/app.jsonnet", 0) :wrap "src jsonnet"

#+RESULTS:
#+begin_src jsonnet
oschema.sort_select(hier, "app")
#+end_src

This scans our temporary object ~hier~ and outputs an array holding
only the types which are "in" the ~["app"]~ path.  The array is output
in topological so that any dependency precedes a type that depends on
it.  Along the way any ~.deps~ attributes, which are temporary to
assist in sorting, are stripped.

We can see the final result in full JSON glory:

#+begin_src shell :exports both :results output code :wrap "src json"
  moo compile examples/oschema/app.jsonnet
#+end_src

#+RESULTS:
#+begin_src json
[
    {
        "items": "sys.Count",
        "name": "Counts",
        "path": [
            "app"
        ],
        "schema": "sequence"
    },
    {
        "format": "email",
        "name": "Email",
        "path": [
            "app"
        ],
        "schema": "string"
    },
    {
        "fields": [
            {
                "item": "app.Email",
                "name": "email"
            },
            {
                "item": "app.Counts",
                "name": "counts"
            }
        ],
        "name": "Person",
        "path": [
            "app"
        ],
        "schema": "record"
    }
]
#+end_src



** Python
   :PROPERTIES:
   :CUSTOM_ID: schema-in-python
   :END:


~moo~ oschema may be produced as data in a variety of representations
and formats. In addition to Jsonnet and JSON as described above, ~moo~
supports data structures in XML, INI and YAML (for poor souls that
think YAML is a good idea).

A bare bones example of the use of ~moo~ Python to load schema as data
into ~moo.oschema~ objects and back to data is given in:

#+include: examples/oschema/round-trip.py src python

A trivial hand-wired construction of the same schema using
~moo.oschema~ Python is in:

#+include: examples/oschema/hand-wired.py src python

* Transforms
  :PROPERTIES:
  :CUSTOM_ID: transforms
  :END:

The main use of ~moo~ is to apply a data structure ("model") to a
template in order to generate a file (eg, a C++ header file).  The
template must have an understanding ("contract") of the structure of
the model.  The "oschema" structure described here is likely not
enough information, or not in a convenient form, for templates to be
easily defined.  

We must then have means to *transform* and possibly *augment* the
initial data structure into a *model* expected by the template and
~moo~ supports several strategies.

** DIY
   :PROPERTIES:
   :CUSTOM_ID: diy-trans
   :END:

In some cases, transformation and augmentation can may be done at the
input data structure level (ie, in Jsonnet).  ~moo~ "supports" this in
general by not restricting the structure of the input data.  Users are
free to come up with their own solutions.  Typically this requires
accepting a fluid contract between models and templates as one
iterates both.

** Jsonnet
   :PROPERTIES:
   :CUSTOM_ID: jsonnet-tla-trans
   :END:

In the case of using Jsonnet to describe the input data structure, the
~moo~ CLI supports the passing "top level arguments" (TLA) to the
Jsonnet code.  This requires the Jsonnet to evaluates to a top level
function.  

This simple example shows how TLAs work:

#+input: examples/oschema/tla.jsonnet src jsonnet

#+begin_src shell :exports both :results output code :wrap "src json"
  moo -A arg="hi" compile examples/oschema/tla.jsonnet
#+end_src

#+RESULTS:
#+begin_src json
{
    "arg": "hi",
    "def": "default"
}
#+end_src

As shown, multiple TLAs may be used and default TLA values may be
given in the Jsonnet and omitted on the CLI.  A TLA may also be
specified as a Jsonnet file in which case the contents of that file
will be evaluated and the resulting structure passed to the top level
function.  Reusing the above example and the ~sys~ schema file:

#+begin_src shell :exports both :results output code :wrap "src json"
  moo -A arg=examples/oschema/sys.jsonnet compile examples/oschema/tla.jsonnet
#+end_src

#+RESULTS:
#+begin_src json
{
    "arg": [
        {
            "deps": [],
            "dtype": "u4",
            "name": "Count",
            "path": [
                "sys"
            ],
            "schema": "number"
        }
    ],
    "def": "default"
}
#+end_src

Thus, with TLAs one may construct a Jsonnet file that transforms and
augments some initial data structure. 

** Python
   :PROPERTIES:
   :CUSTOM_ID: python-trans
   :END:

Jsonnet is a "small" language (one of its charms) and some
transformations may be complex enough that its simplicity poses a
limitation.  ~moo~ thus allows transformations to be defined in Python
and this opens up the ability to form the contract between model and
template in a more strong and object-oriented manner.

To do this, the user may tell the ~moo~ CLI to apply a Python function
to transform the input data just prior to the application of the
template.  The function is specified as a "dot" path naming the
function in its module.  We may use the ~moo dump~ command to
illustrate a transformation applied to the ~app~ schema:

#+begin_src shell :exports both :results output code :wrap "src json"
  moo -J examples/oschema dump -t moo.oschema.namespacify app.jsonnet
#+end_src

#+RESULTS:
#+begin_src json
<Namespace "" parts:{app, Counts, Email, Person}>
#+end_src


The built-in ~moo.oschema.namespacify()~ function takes an oschema
(array of types) and places them into a top level ~namespace~ based on
their individual ~path~ values.  The template may then rely on the
resulting object-oriented structure.  Here is a simple example
template that iterates over a "namespacified" schema to print out the
contexts into a text file:

#+include: examples/oschema/oo.txt.j2 example

And, apply the transformed schema as a model to this template:

#+begin_src shell :exports both :results output code :wrap "example"
  moo -T examples/oschema -J examples/oschema \
    render -t moo.oschema.namespacify \
      app.jsonnet oo.txt.j2
#+end_src

#+RESULTS:
#+begin_example
Top namespace:
<Namespace "" parts:{app}>

It holds these sub-namespaces:
<Namespace "app" parts:{Counts, Email, Person}>

It holds these types
<Sequence "app.Counts" items:sys.Count>
<String "app.Email">
<Record "app.Person" fields:{email, counts}>

Dump model as Python data:
{'name': '', 'schema': 'namespace', 'path': [], 'doc': '', 'app': {'name': 'app', 'schema': 'namespace', 'path': [], 'doc': '', 'Counts': {'name': 'Counts', 'schema': 'sequence', 'path': ['app'], 'doc': '', 'items': 'sys.Count'}, 'Email': {'name': 'Email', 'schema': 'string', 'path': ['app'], 'doc': '', 'pattern': None, 'format': 'email'}, 'Person': {'name': 'Person', 'schema': 'record', 'path': ['app'], 'doc': '', 'fields': [{'name': 'email', 'item': 'app.Email'}, {'name': 'counts', 'item': 'app.Counts'}]}}}
#+end_example

Another example showing a pipeline of transformations:

#+begin_src shell :exports both :results output code :wrap "example"
  moo -T examples/oschema -J examples/oschema \
    render -t moo.oschema.typify -t moo.oschema.graph -t moo.oschema.depsort \
      app.jsonnet ool.txt.j2
#+end_src

#+RESULTS:
#+begin_example
Iterate over list of types:
<Sequence "app.Counts" items:sys.Count>
<String "app.Email">
<Record "app.Person" fields:{email, counts}>
#+end_example

Note the ~Person~ comes after the ~Counts~ and ~Email~ on which its
fields depend.

This example also shows that the pipeline may becomes rather complex.
At some point, developing a composite transformation function will be
useful to keep CLI argument list small.


* Objects
  :PROPERTIES:
  :CUSTOM_ID: objects
  :END:

Besides generating code from a schema, an object may be validated
against a schema.  Schema may also be used to support creation of
objects which are valid-by-construction.


** Validation
   :PROPERTIES:
   :CUSTOM_ID: object-val
   :END:

The ~moo.oschema~ schema classes produce type instances which provide
snippets of [[https://json-schema.org/understanding-json-schema/index.html][JSON Schema]].  Type instances are also ~callable~ objects.
When called on a value, it will be validated against the type's
schema.

- [ ] use with ~moo~ with a schema document
- [ ] use with ~moo.oschema~ 


** Construction
   :PROPERTIES:
   :CUSTOM_ID: object-ctor
   :END:

Type instances of the ~moo.oschema~ schema classes provide validating
factories. 

- [ ] some examples


