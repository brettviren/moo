#ifndef MOC_STREAM_HPP
#define MOC_STREAM_HPP

#include <istream>
#include <functional>
#include "json.hpp"

namespace moc {

    using json = nlohmann::json;

    // A moc stream may be provided in various ways, eg from a file,
    // ZeroMQ socket, etc.  Each call to a stream source function
    // should return the next frame.
    using stream_source_t =
        std::function<std::vector<std::byte>()>;

    /// A stream source from any istream.
    struct istream_source {
        std::istream& stream;
        file_source(std::istream& s): stream(s) {};
        std::vector<std::byte> operator()() {
            int size = 0;
            char s=0;
            stream >> s;
            if (s == 255) {
                stream >> size;
            }
            else {
                size = s;
            }
            std::vector<std::byte> ret(size);
            stream.read(ret.data(), size);
            return ret;
        }
    };

    

    /// fixme: todo:
    // struct zeromq_source {};

    // A moc "type stream" takes a moc stream and performs
    // serialization to restore types.  It relies on serialization
    // code such as generated by moc to do the heavy lifting.

    class type_stream {
        stream_source_t source;
      public:
        type_stream(stream_source_t ss) : source(ss) { };
        
        template<typename T>
        T pop() {
            auto data = source();
            std::string hint(static_cast<const char*>(dat.data()), dat.size());
            json jobj;
            if (hint == "JSON") {
                dat = source();
                std::string text(static_cast<const char*>(dat.data()), dat.size());
                jobj.parse(text);
            }
            else if (hint == "BSON") {
                dat = source();
                std::string text(static_cast<const char*>(dat.data()), dat.size());
                jobj = json::from_bson(dat);
            }
            else if (hint == "CBOR") {
                dat = source();
                std::string text(static_cast<const char*>(dat.data()), dat.size());
                jobj = json::from_cbor(dat);
            }
            else if (hint == "MSGP") {
                dat = source();
                std::string text(static_cast<const char*>(dat.data()), dat.size());
                jobj = json::from_msgpack(dat);
            }
            else if (hint == "UBJS") {
                dat = source();
                std::string text(static_cast<const char*>(dat.data()), dat.size());
                jobj = json::from_ubjson(dat);
            }
            else {
                throw std::runtime_error("unkown moc stream hint");
            };
            return jobj.get<T>(); // relies on from_json() implemented
        }
    };
}
#endif
