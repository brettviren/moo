#+title: moo DUNE DAQ CCM Example

* Configuration generation

Currently, CCM command objects are created as JSON files generated by
CLI programs.  The CLI exposes a number of high-level parameters to
govern the generation.  The single-source of truth for the commands is
this parameter set plus the generator code.  Currently a single
generator exists (~minidaqapp.mdapp_multiru_gen~).

** Current workflow

The first step to integrate the CCM web UI will retain this CLI
workflow at the cost of some manual steps.

1. A moo oschema Jsonnet file is hand-made by translating the implicit
   schema of the CLI high-level parameter set.

2. A moo compile is run on this to produce JSON Schema.

3. The JSON Schema is installed into the CCM web UI to automatically
   create web form to edit and browse objects matching that schema.

4. CCM web UI provides a URL for each object which returns its JSON.

5. Given URL, its JSON or just the object name a CLI program will run
   the associated generator to produce the CCM command objects.

6. ~nanorc~ will consume those command objects.

*** Generating the JSON Schema

The current hand-translated oschema: [[file:mdapp-multiru-gen-schema.jsonnet][mdapp-multiru-gen-schema.jsonnet]].

Generating JSON Schema version:

#+begin_src shell :exports both :results output code :wrap "example"
  moo -A typeref='minidaqapp.mdapp_multiru_gen' \
      -A types=mdapp-multiru-gen-schema.jsonnet \
          compile moo2jschema.jsonnet \
          > mdapp-multiru-gen-schema.json
  jq '.definitions.minidaqapp.mdapp_multiru_gen|keys' \
     mdapp-multiru-gen-schema.json
#+end_src

#+RESULTS:
#+begin_example
[
  "ArgbPath",
  "Flag",
  "Float",
  "Host",
  "Hosts",
  "Int",
  "MdappMultiruGen",
  "Path"
]
#+end_example

*** Retrieving an object

T.b.d but either a specific URL or a generic URL with specific POST
parameters.  Either way, object lookup should be keyed by SCHEMA and
NAME.  Eg, preferably former like:

#+begin_example
  curl https://ccm.daq.dune.cern/objects/<SCHEMA>/<NAME>
  --> JSON
#+end_example

*** Generating config

T.b.d but something like:

#+begin_example
  gen-ccm-commands \
    [--urlbase https://ccm.daq.dune.cern/objects ] \
    -m outdir/ --schema <SCHEMA> --object <NAME>
  --> outdir/*.json
#+end_example

Then, run ~nanorc~ on ~outdir/~ as usual.

** Future workflow 

Before generators proliferate, we'd like to take steps to define their
interface to allow for better integration.  Existing workflow can be
retained.  These steps include:

- Make moo oschema Jsonnet hold definitive schema for a configuration
  generator's high-level parameters.
- Use moo templates to generate configuration generators CLI code
- Factor generator into a Python function which takes a ~dict~ of
  high-level parameters.
- Add CLI command which takes a JSON of high-level parameters (CLI
  option/argument interface can be retained).
- Consider CCM web UI Flask app to dynamically import this generator
  function.  This would be based on generator function and schema
  names matching in some way.
- Flask app can then generated CCM command JSON and dispatch to
  Run Control.  Initially this can still be ~nanorc~.

